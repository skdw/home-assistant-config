- id: 'lights_switch2light'
  alias: YAML Lights - On switch toggle light
  variables:
    lights: !include ../entities/lights.yaml
    switches: !include ../entities/switches.yaml
  mode: parallel
  max: 20
  trigger:
  - platform: state
    entity_id: !include ../entities/switches.yaml
  condition:
  - condition: template # automate only if initial light and switch states match
    value_template: "{{ states(lights[switches.index(trigger.entity_id)]) == trigger.from_state.state }}"
  - condition: template # keep only on/off states, drop unavailable and unknown
    value_template: "{{ trigger.to_state.state == 'on' or trigger.to_state.state == 'off' }}"
  action:
  - service: "{{ 'light.turn_on' if(trigger.to_state.state == 'on') else 'light.turn_off' }}"
    target:
      entity_id: "{{ lights[switches.index(trigger.entity_id)] }}"
- id: 'lights_light2switch'
  alias: YAML Lights - On light toggle switch
  variables:
    lights: !include ../entities/lights.yaml
    switches: !include ../entities/switches.yaml
  mode: parallel
  max: 20
  trigger:
  - platform: state
    entity_id: !include ../entities/lights.yaml
  condition:
  - condition: template # automate only if initial switch and light states match
    value_template: "{{ states(switches[lights.index(trigger.entity_id)]) == trigger.from_state.state }}"
  - condition: template # keep only on/off states, drop unavailable and unknown
    value_template: "{{ trigger.to_state.state == 'on' or trigger.to_state.state == 'off' }}"
  action:
  - service: "{{ 'switch.turn_on' if(trigger.to_state.state == 'on') else 'switch.turn_off' }}"
    target:
      entity_id: "{{ switches[lights.index(trigger.entity_id)] }}"

